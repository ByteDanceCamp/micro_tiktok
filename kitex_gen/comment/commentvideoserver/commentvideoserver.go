// Code generated by Kitex v0.3.1. DO NOT EDIT.

package commentvideoserver

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"micro_tiktok/kitex_gen/comment"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentVideoServerServiceInfo
}

var commentVideoServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentVideoServer"
	handlerType := (*comment.CommentVideoServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"Comment":  kitex.NewMethodInfo(commentHandler, newCommentArgs, newCommentResult, false),
		"List":     kitex.NewMethodInfo(listHandler, newListArgs, newListResult, false),
		"CountRes": kitex.NewMethodInfo(countResHandler, newCountResArgs, newCountResResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment.video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentVideoServer).Comment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentArgs:
		success, err := handler.(comment.CommentVideoServer).Comment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentResult)
		realResult.Success = success
	}
	return nil
}
func newCommentArgs() interface{} {
	return &CommentArgs{}
}

func newCommentResult() interface{} {
	return &CommentResult{}
}

type CommentArgs struct {
	Req *comment.CommentRequest
}

func (p *CommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.CommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentArgs_Req_DEFAULT *comment.CommentRequest

func (p *CommentArgs) GetReq() *comment.CommentRequest {
	if !p.IsSetReq() {
		return CommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentResult struct {
	Success *comment.CommentResponse
}

var CommentResult_Success_DEFAULT *comment.CommentResponse

func (p *CommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentResult) Unmarshal(in []byte) error {
	msg := new(comment.CommentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentResult) GetSuccess() *comment.CommentResponse {
	if !p.IsSetSuccess() {
		return CommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CommentResponse)
}

func (p *CommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentVideoServer).List(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListArgs:
		success, err := handler.(comment.CommentVideoServer).List(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListResult)
		realResult.Success = success
	}
	return nil
}
func newListArgs() interface{} {
	return &ListArgs{}
}

func newListResult() interface{} {
	return &ListResult{}
}

type ListArgs struct {
	Req *comment.CommentListRequest
}

func (p *ListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListArgs) Unmarshal(in []byte) error {
	msg := new(comment.CommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListArgs_Req_DEFAULT *comment.CommentListRequest

func (p *ListArgs) GetReq() *comment.CommentListRequest {
	if !p.IsSetReq() {
		return ListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListResult struct {
	Success *comment.CommentListResponse
}

var ListResult_Success_DEFAULT *comment.CommentListResponse

func (p *ListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListResult) Unmarshal(in []byte) error {
	msg := new(comment.CommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListResult) GetSuccess() *comment.CommentListResponse {
	if !p.IsSetSuccess() {
		return ListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CommentListResponse)
}

func (p *ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func countResHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CommentCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentVideoServer).CountRes(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountResArgs:
		success, err := handler.(comment.CommentVideoServer).CountRes(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountResResult)
		realResult.Success = success
	}
	return nil
}
func newCountResArgs() interface{} {
	return &CountResArgs{}
}

func newCountResResult() interface{} {
	return &CountResResult{}
}

type CountResArgs struct {
	Req *comment.CommentCountRequest
}

func (p *CountResArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountResArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountResArgs) Unmarshal(in []byte) error {
	msg := new(comment.CommentCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountResArgs_Req_DEFAULT *comment.CommentCountRequest

func (p *CountResArgs) GetReq() *comment.CommentCountRequest {
	if !p.IsSetReq() {
		return CountResArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountResArgs) IsSetReq() bool {
	return p.Req != nil
}

type CountResResult struct {
	Success *comment.CommentCountResponse
}

var CountResResult_Success_DEFAULT *comment.CommentCountResponse

func (p *CountResResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountResResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountResResult) Unmarshal(in []byte) error {
	msg := new(comment.CommentCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountResResult) GetSuccess() *comment.CommentCountResponse {
	if !p.IsSetSuccess() {
		return CountResResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountResResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CommentCountResponse)
}

func (p *CountResResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Comment(ctx context.Context, Req *comment.CommentRequest) (r *comment.CommentResponse, err error) {
	var _args CommentArgs
	_args.Req = Req
	var _result CommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, Req *comment.CommentListRequest) (r *comment.CommentListResponse, err error) {
	var _args ListArgs
	_args.Req = Req
	var _result ListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountRes(ctx context.Context, Req *comment.CommentCountRequest) (r *comment.CommentCountResponse, err error) {
	var _args CountResArgs
	_args.Req = Req
	var _result CountResResult
	if err = p.c.Call(ctx, "CountRes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
